#!/usr/bin/php -q
<?php

// Replacement for Asterisk's ENUMLOOKUP function. 
// Written by Rob Thomas <xrobau@gmail.com>
//
//    This file is part of FreePBX. http://www.freepbx.org
//
//    FreePBX is free software: you can redistribute it and/or modify
//    it under the terms of the GNU Affero General Public License as
//    published by the Free Software Foundation, either version 3 of the
//    License, or (at your option) any later version.
//
//    FreePBX is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU Affero General Public License for more details.
//
//    You should have received a copy of the GNU Affero General Public License
//    along with FreePBX.  If not, see <http://www.gnu.org/licenses/>.
//
//    Copyright 2009 Rob Thomas
//    Additional patch to support enum.conf by matka
//
//    Originally based on e164.org's enum.php script, available from
//        http://www.e164.org/enum.phps

/* --------WARNING---------
 * 
 * This script is automatically copied from $ASTMODULES/core/agi-bin and will be 
 * overwritten any time you do any module changes. To avoid this, either set this
 * file to READ ONLY (chmod a-w enumlookup.agi) or alter the file in core.
 * It's probably better to submit any changes or enhancements to the freepbx tracker
 * and they'll be rolled into core!
 *
 * --------WARNING---------
*/

require_once "phpagi.php";

$AGI = new AGI();
$lookup = get_var( $AGI, "DIAL_NUMBER" );

$enums = get_enum_providers();

$dialstr = "";

foreach ($enums as $enum) {  // Go through the ENUM providers and look for the number.
	// Are we using php5 and can use get_dns_record?
		if (function_exists("dns_get_record")) {
			$arr = get_php5($lookup, $enum);
	// else, do we have Pear Net DNS?
	// Disabled, as I couldn't easily get it working on my machine
	//} elseif ((@include 'Net/DNS.php') =='OK') {
	//	$arr = get_pear($arpa);
	} else {
		@exec('dig -h > /dev/null 2>&1 ', $res, $var);
		if ($var != 127) { 
			$arr = get_dig($lookup, $enum);
		} else {
			$AGI->verbose("ENUM LOOKUPS DISABLED due to php5 not being installed AND no dig command", "0");
		}
	}
	if (isset($arr[0])) {
		foreach($arr as $key => $row) {
			$order[$key] = $row["order"];
			$prio[$key] = $row["prio"];
			$nextURI[] = $row['URI'];
			$row['URI'] = count($nextURI) - 1;
			$arr[$key] = $row;
		}
		array_multisort($order, SORT_ASC, SORT_NUMERIC, $prio, SORT_ASC, SORT_NUMERIC, $arr);
		foreach ($arr as $key => $row) {
			if (eregi('SIP|IAX', $row['tech'])) {
				$URI = $row['URI'];
				// string delimiter defined in [macro-dialout-enum]
				$dialstr .= $nextURI[$URI]."%";
			}
		}
	}
}

$AGI->verbose("Setting DIALARR to $dialstr", 3);
$AGI->set_variable("DIALARR", $dialstr);

function get_dig($lookup, $enum) {
	global $AGI;

	$AGI->verbose("Looking up $lookup on $enum via shell command DIG",3);
	$arpa = "";
	for ($i = 0; $i < strlen($lookup); $i++) {
		$arpa = $lookup[$i].".".$arpa;
	}
	$lines = trim(`/usr/bin/dig +short ${arpa}${enum} naptr`);
	$lines = explode("\n", $lines);
	foreach($lines as $line) {
		$line = trim($line);
		if (preg_match("/^;;/", $line))
			continue;
		if (!isset($arr)) $arr = array();
		$line = str_replace("\t", " ", $line);
		while(strstr($line, "  "))
			$line = str_replace("  ", " ", $line);
		$line = str_replace("\"", "", $line);
		$line = str_replace("\'", "", $line);
		$line = str_replace(" ", "|", $line);
		$bits = explode("|", $line);
		$bit = explode("!", stripslashes($bits[4]));
		$URI = ereg_replace($bit[1], $bit[2], "+".$lookup);
		if($URI[3] == ":")
			$URI[3] = "/";
		if($URI[4] == ":")
		$URI[4] = "/";
		$arr[] = array("order" => $bits[0], "prio" => $bits[1], "tech" => $bits[3], "URI" => $URI);
	}
	if (isset($arr[0])) {
		return $arr;
	} else {
		return null;
	}
}

function get_php5($lookup, $enum) {
	global $AGI;

	$AGI->verbose("Looking up $lookup on $enum via dns_get_record",3);

	$arpa = "";
	for ($i = 0; $i < strlen($lookup); $i++) {
		$arpa = $lookup[$i].".".$arpa;
	}
	$res = dns_get_record("$arpa$enum", DNS_NAPTR);
	foreach ($res as $entry) {
		if (!isset($arr)) $arr = array();
		$bit = explode("!", $entry['regex']);
		$URI = ereg_replace($bit[1], $bit[2], "+".$lookup);
		if($URI[3] == ":") $URI[3] = "/";
		if($URI[4] == ":") $URI[4] = "/";
		$arr[] = array("order" => $entry['order'], "prio" => $entry['pref'], "tech" => $entry['services'], "URI" => $URI);
	}
	if (isset($arr[0])) {
		return $arr;
	} else {
		return null;
	}
}


// helper functions
function get_var( $agi, $value)
{
	$r = $agi->get_variable( $value );

	if ($r['result'] == 1)
	{
		$result = $r['data'];
		return $result;
	}
	else return '';
}

function get_enum_providers() {
	// parse enum.conf config file 
	$localprefix_file = get_var($AGI, "ASTETCDIR")."/enum.conf"; 
	if (file_exists($localprefix_file)) { 
		$section="general"; 
		parse_conf($localprefix_file, $conf, $section); 
		if (count($conf) == 0) { 
			$AGI->verbose("Could not parse config file $localprefix_file - using default e164.org", 0); 
			return Array("e164.org");
		} 
	} else { 
		$AGI->verbose("Could not open config file $localprefix_file - using default e164.org", 0); 
		return Array("e164.org");
	} 

	$enums = Array(); 
	// pickup search org from the conf array 
	if (isset($conf["general"])) { 
		foreach ($conf["general"] as $key=>$options) { 
			if (isset($options["search"])) { 
				foreach($options as $enumorgs) { 
					$enums[]=$enumorgs; 
				} // store each enumorg in array         
			} // else, diff option  
		} // else, this isn't the section we want 
	} // else, no config for this section 
}

function parse_conf($filename, &$conf, &$section) { 
	global $AGI; 
	$AGI->verbose("Parsing config file $filename",3); 

	if (is_null($conf)) { $conf = array(); } 

	if (is_null($section)) { $section = "general"; } 

	if (file_exists($filename)) { 
		$fd = fopen($filename, "r"); 
		while ($line = fgets($fd, 1024)) { 
			if (preg_match("/^\s*([a-zA-Z0-9-_]+)\s*=>\s*(.*?)\s*([;#].*)?$/",$line,$matches)) { 
				// name => => value 
				// keep [] to allow for duplicate options like search 
				// could extend options to include for example: 
				// skipgateway => slow-sip-gateway.com 
				// earlyexit => yes (to return only 1 enum from dns lookup)  
				$conf[$section][][$matches[1]] = $matches[2]; 
			} else if (preg_match("/^\s*\[(.+)\]/",$line,$matches)) { 
				// section name 
				$section = strtolower($matches[1]); 
			} else if (preg_match("/^\s*#include\s+(.*)\s*([;#].*)?/",$line,$matches)) { 
				// include another file 
				if ($matches[1][0] == "/") { 
					// absolute path 
					$filename = $matches[1]; 
				} else { 
					// relative path 
					$filename =  dirname($filename)."/".$matches[1]; 
				} 
				parse_conf($filename, $conf, $section); 
			} 
		}
	}
}

?>
